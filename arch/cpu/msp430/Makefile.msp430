ifdef nodeid
CFLAGS += -DNODEID=$(nodeid)
endif

CFLAGS_DEBUG = -gstabs+

### Define the CPU directory
CONTIKI_CPU = $(CONTIKI_NG_RELOC_CPU_DIR)/msp430

### Define the source files we have in the MSP430 port

ifndef CONTIKI_CPU_FAM_DIR
 ifneq (,$(findstring msp430f1,$(MCU)))
  CONTIKI_CPU_FAM_DIR = f1xxx
 endif
endif
ifndef CONTIKI_CPU_FAM_DIR
 ifneq (,$(findstring msp430f5,$(MCU)))
  CONTIKI_CPU_FAM_DIR = f5xxx
 endif
endif
ifndef CONTIKI_CPU_FAM_DIR
 ifneq (,$(findstring msp430f2,$(MCU)))
  CONTIKI_CPU_FAM_DIR = f2xxx f1xxx
 endif
endif
ifndef CONTIKI_CPU_FAM_DIR
 ${error Unhandled MSP430 family: "$(MCU)"}
endif

CONTIKI_CPU_DIRS = $(CONTIKI_CPU_FAM_DIR) . dev

MSP430     = msp430.c flash.c clock.c leds.c leds-arch.c \
             watchdog.c lpm.c rtimer-arch.c int-master.c
UIPDRIVERS = crc16.c

CONTIKI_TARGET_SOURCEFILES += $(MSP430) \
                              $(SYSAPPS) \
                              $(UIPDRIVERS)

CONTIKI_SOURCEFILES        += $(CONTIKI_TARGET_SOURCEFILES)

### Compiler definitions

# Target does not use DWARF debug format, so disable CHECK_STRUCTS.
NO_CHECK_STRUCTS = 1
# Clang supports MSP430, but more Contiki-NG-work is required to use it.
NO_CLANG = 1
# LTO is available in GCC 4.7.2, but crashes for MSP430.
NO_LTO_TARGET = 1
# No -fanalyzer before GCC 10.
override ANALYZE = 0

ifeq ($(WERROR),1)
  CFLAGSWERROR = -Werror
endif

CC       = msp430-gcc
CXX      = msp430-g++
LD       = msp430-gcc
AS       = msp430-as
AR       = msp430-ar
NM       = msp430-nm
OBJCOPY  = msp430-objcopy
STRIP    = msp430-strip
SIZE     = msp430-size
BSL      = msp430-bsl

ifdef CPU_HAS_MSP430X
 ifeq ($(TARGET_MEMORY_MODEL),large)
  CFLAGS += -mmemory-model=$(TARGET_MEMORY_MODEL)
  CFLAGS += -mcode-region=far -mdata-region=far -msr20 -mc20 -md20
  LDFLAGS += -mmemory-model=$(TARGET_MEMORY_MODEL) -mcode-region=far -mdata-region=far -msr20 -mc20 -md20
 else
  TARGET_MEMORY_MODEL = medium
  CFLAGS += -mmemory-model=$(TARGET_MEMORY_MODEL)
  CFLAGS += -ffunction-sections -fdata-sections -mcode-region=any
  LDFLAGS += -mmemory-model=$(TARGET_MEMORY_MODEL) -Wl,-gc-sections
 endif
endif

ifndef CFLAGSNO
CFLAGSNO = -Wall -mmcu=$(MCU) $(CFLAGSWERROR)
endif
CFLAGS  += -Os -fno-strict-aliasing -std=gnu11
LDFLAGS += -mmcu=$(MCU) -Wl,-Map=$(CONTIKI_NG_PROJECT_MAP)
LDFLAGS += -Wl,--sort-section=alignment

### These flags can reduce the code size and RAM usage with up to 10%
SMALL ?= 1
ifeq ($(SMALL),1)
CFLAGS += -ffunction-sections
# CFLAGS += -fdata-sections
LDFLAGS += -Wl,--gc-sections,--undefined=_reset_vector__,--undefined=InterruptVectors,--undefined=_copy_data_init__,--undefined=_clear_bss_init__,--undefined=_end_of_init__
endif # SMALL

# Define the `_stack` symbol used by the stack check library to be equal to `_end`
LDFLAGS += -Wl,--defsym=_stack=_end

CFLAGS  += $(CFLAGSNO)

PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,$(CONTIKI_TARGET_MAIN:.c=.o)}

### CPU-dependent cleanup files
CLEAN += *.firmware *.ihex

### Compilation rules

%-stripped.o: %.c
	$(CCACHE) $(CC) $(CFLAGS) -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@

%-stripped.o: %.o
	$(STRIP) --strip-unneeded -g -x -o $@ $<

%.firmware:	%.${TARGET}
	mv $< $@

%.ihex: $(BUILD_DIR_BOARD)/%.$(TARGET)
	$(OBJCOPY) $^ -O ihex $@

$(COOJA_PATH)/java:
	@echo '----------------'
	@echo 'Could not find COOJA. Did you run "git submodule update --init --recursive"?'
	@echo '----------------'
	@false

$(COOJA_PATH)/build/libs/cooja-full.jar: | $(COOJA_PATH)/java
	$(Q)$(GRADLE) --no-watch-fs --parallel --build-cache -p $(COOJA_PATH) fulljar

%.mspsim: $(BUILD_DIR_BOARD)/%.${TARGET} ${COOJA_PATH}/build/libs/cooja-full.jar
	  $(Q)$(JAVA) -classpath ${COOJA_PATH}/build/libs/cooja-full.jar se.sics.mspsim.Main -platform=${TARGET} $(realpath $<)

%.mspsim-maptable: $(BUILD_DIR_BOARD)/%.$(TARGET) ${COOJA_PATH}/build/libs/cooja-full.jar
	$(Q)$(JAVA) -classpath ${COOJA_PATH}/build/libs/cooja-full.jar se.sics.mspsim.util.MapTable $(CONTIKI_NG_PROJECT_MAP)
